"""
To run:

1) start script
2) start server
3) start client
4) log in
5) run <list>
"""

# standard
import re

# installed
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# custom
import tcpdump_wrap

BACKEND = default_backend()

####################################

# LIST_REQUEST = bytearray(b'\xf9*\x85\x99\xc9\xcd\xe2o\x8b\xf5\xbc\xd9\xff<N6C3@R\xd99\xe5\xdf\x0c\xe3vs\xa9ifl12\xfe\xc8?\x13\x03\xef.\xff\xbb\x08T7RP<\xe3')

####################################

P = 45215679089341564880983468793221
G = 2

def generate_bad_dh_values():

    possible_es = xrange(1,100)

    return [pow(G,e,P) for e in possible_es]

DH_KEYS = generate_bad_dh_values()

####################################

def symdec(msg,key):
    backend = default_backend()
    iv=msg[-16:]
    msg=msg[:-16]
    length=int(msg[-2:])
    msg=msg[:-2]
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    decryptor = cipher.decryptor()
    decoded=decryptor.update(msg) + decryptor.finalize()
    decoded = decoded[:-length]
    return decoded

def generatesymkey(symkey):
    digest = hashes.Hash(hashes.SHA256(), backend=BACKEND)
    digest.update(str.encode(str(symkey)))
    return digest.finalize() # sus

####################################
# Diffie-Hellman crack exploit
####################################

def break_bad_dh(data):

    for a in xrange(1,100):
        for b in xrange(1,100):
            k = pow(pow(G,a,P),b,P)
            k = generatesymkey(k)

            out = symdec(data, k)
            if out.startswith("list&&&"):
                print out
                print "Broke Diffie-Hellman!"
                print "A and B are: {} and {}".format(repr(a), repr(b))
                print "Their shared DH key is: {}".format(repr(k))
                return (a, b, k)

SERVER = 'localhost.italk'
WELCOME_REGEX = r"welcome (.+)"

GEN = tcpdump_wrap.fetch()

# 1) wait for OK
GOT_NAME = False
print "Waiting for login success..."
for (frm, to, data) in GEN:
    if frm == SERVER and re.match(WELCOME_REGEX, data):
        name = re.match(WELCOME_REGEX, data).group(1)   
        CLIENT_NAME = name
        CLIENT = to
        GOT_NAME = True
        print "... got client name ({})!".format(name)
        print "Now waiting for 'ok'..."
    if to == SERVER and data == 'ok' and GOT_NAME:
        print "... got it.\n"
        break

print "Client ID: {}".format(CLIENT)

# 2) grab list
print "Waiting for list() call...\n"
for (frm, to, data) in GEN:
    if frm == CLIENT and to == SERVER:
        print "Got something ..."
        
        out = break_bad_dh(data)
        if not out:
            print "... wasn't a list() call.\n"
        else:
            (a,b,k) = out
            KEY_A = a
            KEY_B = b
            KEY = k
            break

# 4) break everything
for (frm, to, data) in GEN:
    if CLIENT in (frm, to):
        print
        print "{} {}:".format(CLIENT_NAME, 'sent' if frm == CLIENT else 'got')
        print "{}".format(repr(symdec(data, KEY)))
